plugins {
    id 'org.springframework.boot' version '2.3.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id "io.freefair.lombok" version "6.0.0-m2"
    id 'java'
}

group = 'org.thoughtworks.induction'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation 'org.flywaydb:flyway-core'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.3.3.RELEASE'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    //runtimeOnly 'mysql:mysql-connector-java'
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation('org.junit.jupiter:junit-jupiter-engine')
}

test {
    systemProperty 'spring.profiles.active', 'test'
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
    }
}

task explode(type: Copy) {

    dependsOn 'clean'
    dependsOn 'build'
    tasks.findByName('build').mustRunAfter 'clean'  //dependsOn doesn't define an order of tasks execution, it just make one task dependent from another, while mustRunAfter does
    tasks.findByName('explode').mustRunAfter 'build'

    def zipPath = file("${buildDir}/libs/sample-0.0.1-SNAPSHOT.jar") //project.configurations.compile.find {it.name.startsWith("jmeter") }
    //println zipPath
    def zipFile = file(zipPath)
    def outputDir = file("${buildDir}/exploded")

    from zipTree(zipFile)
    into outputDir

}


